
"""
This script processes Hamiltonian systems and extracts size before and after truncation 
under different parameters. It iterates over a set of Hamiltonian datasets. The script 
outputs detailed numerical results for the size of systems (Hamiltonians) graph/table 
in the evaluation.

This file is part of the AccelerQ Project.
(2025) King's College London. CC BY 4.0.
- You must give appropriate credit, provide a link to the license, and indicate if changes 
  were made. You may do so in any reasonable manner, but not in any way that suggests 
  the licensor endorses you or your use.

"""

import sys
import os
import numpy as np
from kcl_util import process_file, ham_to_vector
from kcl_util_adapt_vqe import generate_hyper_params_avqe
from kcl_tests_adapt_vqe import print_1

def main():
    # Set up
    np.set_printoptions(precision=17)
    folder_path = "../hamiltonian/"

    # List of (num_qubits, seed) pairs to use in function calls
    num_qubits_seed_pairs = [
         (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5),
         (24, 5), (24, 6), (24, 7), (24, 8), (24, 9),
         (28, 0), (28, 1), (28, 2), (28, 3), (28, 4)
    ]

    is_OPT = True
    is_TEST = True
    for num_qubits, seed in num_qubits_seed_pairs:
        n_qubits = num_qubits
        if is_TEST:
            print ("Optimised+Tests params")
            # Get better hyper-params
            if n_qubits == 20:
                if (seed == 0):
                    res_opt = np.array(
                          [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  1.46000000000000000e+02, 3.21986372008807294e-05, 0.00000000000000000e+00,
  2.44000000000000000e+02, 1.00000000000000000e+05, 2.06108921013208962e-05,
  9.00000000000000000e+00, 3.00000000000000000e+02, 3.00000000000000000e+00,
  5.90000000000000000e+01 ] # 20,0
                        , dtype=float)

                elif (seed == 1):
                    res_opt = np.array(
                          [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  1.90000000000000000e+02, 9.85954352664219005e-03, 0.00000000000000000e+00,
  5.96000000000000000e+02, 1.00000000000000000e+05, 1.30610293862795180e-05,
  5.00000000000000000e+00, 2.68000000000000000e+02, 3.00000000000000000e+00,
  0.00000000000000000e+00 ] # 20,1
                        , dtype=float)

                elif (seed == 2):
                    res_opt = np.array(
                          [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  4.07000000000000000e+02, 9.81819634048428959e-03, 0.00000000000000000e+00,
  7.82000000000000000e+02, 9.98330000000000000e+04, 7.54152639693489788e-05,
  9.00000000000000000e+00, 2.97000000000000000e+02, 4.00000000000000000e+00,
  5.90000000000000000e+01 ] # 20,2
                        , dtype=float)

                elif (seed == 3):
                    res_opt = np.array(
                         [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  5.60000000000000000e+01, 5.18945094687578524e-05, 0.00000000000000000e+00,
  3.71000000000000000e+02, 1.00000000000000000e+05, 4.01561237722502493e-06,
  8.00000000000000000e+00, 2.98000000000000000e+02, 3.00000000000000000e+00,
  5.70000000000000000e+01 ]  # 20,3
                        , dtype=float)

                elif (seed == 4):
                    res_opt = np.array(
                          [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  2.31000000000000000e+02, 9.72697195646275714e-03, 0.00000000000000000e+00,
  4.10000000000000000e+01, 2.79077000000000000e+05, 7.98035143732034933e-06,
  7.00000000000000000e+00, 2.98000000000000000e+02, 3.00000000000000000e+00,
  4.60000000000000000e+01 ] # 20,4
                        , dtype=float)

                elif (seed == 5):
                    res_opt = np.array(
                          [ 2.00000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  5.60000000000000000e+01, 7.87475281268110693e-03, 0.00000000000000000e+00,
  1.83250000000000000e+02, 4.80012500000000000e+05, 2.63567586514770683e-05,
  5.50000000000000000e+00, 2.36000000000000000e+02, 4.00000000000000000e+00,
  6.00000000000000000e+01 ] # 20,5
                        , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            elif n_qubits == 24:
                if (seed == 5):
                    res_opt = np.array(
                          [ 2.40000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  5.60000000000000000e+01, 4.30962367155318139e-03, 0.00000000000000000e+00,
  4.80000000000000000e+01, 2.17535000000000000e+05, 7.89079483788077124e-07,
  4.00000000000000000e+00, 2.96000000000000000e+02, 3.00000000000000000e+00,
  5.00000000000000000e+01 ] # 24,5
                        , dtype=float)

                elif (seed == 6):
                    res_opt = np.array(
                          [ 2.40000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  7.70000000000000000e+01, 8.72720940726242483e-03, 0.00000000000000000e+00,
  2.99000000000000000e+02, 2.25504000000000000e+05, 2.68932724972004344e-05,
  7.00000000000000000e+00, 2.84000000000000000e+02, 2.50000000000000000e+00,
  7.52500000000000000e+01 ] # 24,6
                        , dtype=float)

                elif (seed == 7):
                    res_opt = np.array(
                          [ 2.40000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  7.80000000000000000e+01, 8.98037271105459750e-03, 0.00000000000000000e+00,
  5.02500000000000000e+01, 2.49036000000000000e+05, 5.96301434352887505e-06,
  6.00000000000000000e+00, 2.85000000000000000e+02, 4.00000000000000000e+00,
  6.30000000000000000e+0 ] # 24,7
                        , dtype=float)

                elif (seed == 8):
                    res_opt = np.array(
                          [ 2.40000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  6.90000000000000000e+01, 9.41124981615973008e-03, 0.00000000000000000e+00,
  4.84000000000000000e+02, 1.34931000000000000e+05, 9.35630551666948700e-06,
  9.00000000000000000e+00, 2.85000000000000000e+02, 3.00000000000000000e+00,
  3.50000000000000000e+01 ] # 24,8
                        , dtype=float)

                elif (seed == 9):
                    res_opt = np.array(
                          [ 2.40000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  8.00000000000000000e+01, 8.43815263349033916e-03, 0.00000000000000000e+00,
  8.80000000000000000e+01, 1.16681000000000000e+05, 2.09599190399857729e-07,
  6.00000000000000000e+00, 2.38000000000000000e+02, 3.00000000000000000e+00,
  5.50000000000000000e+01 ] # 24,9
                       , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            elif n_qubits == 28:
                if (seed == 0):
                    res_opt = np.array(
                          [ 2.80000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  8.40000000000000000e+01, 1.15588619818301065e-03, 0.00000000000000000e+00,
  4.30000000000000000e+01, 9.61230000000000000e+04, 1.23186052725500676e-06,
  5.00000000000000000e+00, 1.40500000000000000e+02, 3.00000000000000000e+00,
  3.00000000000000000e+00 ] # 28,0
                       , dtype=float)

                elif (seed == 1):
                    res_opt = np.array(
                          [ 2.80000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  1.00000000000000000e+02, 7.38949035448582987e-03, 0.00000000000000000e+00,
  1.00000000000000000e+02, 1.00000000000000000e+05, 9.99999999999999955e-07,
  5.00000000000000000e+00, 1.28000000000000000e+02, 3.00000000000000000e+00,
  0.00000000000000000e+00 ] # 28,1
                       , dtype=float)

                elif (seed == 2):
                    res_opt = np.array(
                          [ 2.80000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  5.50000000000000000e+01, 1.00000000000000002e-03, 0.00000000000000000e+00,
  1.00000000000000000e+02, 9.76700000000000000e+04, 4.57191706710779202e-07,
  5.00000000000000000e+00, 1.58000000000000000e+02, 3.00000000000000000e+00,
  0.00000000000000000e+00 ] # 28,2
                       , dtype=float)

                elif (seed == 3):
                    res_opt = np.array(
                          [ 2.80000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  2.61000000000000000e+02, 9.91399499614014669e-03, 0.00000000000000000e+00,
  9.10000000000000000e+01, 8.23640000000000000e+04, 2.74757971113882111e-05,
  9.00000000000000000e+00, 2.95000000000000000e+02, 3.00000000000000000e+00,
  3.90000000000000000e+01 ] # 28,3
                       , dtype=float)

                elif (seed == 4):
                    res_opt = np.array(
                          [ 2.80000000000000000e+01, 1.00000000000000000e+00, 1.00000000000000000e+00,
  1.00000000000000000e+02, 9.87944675021648275e-03, 0.00000000000000000e+00,
  1.00000000000000000e+02, 1.40471000000000000e+05, 7.96835794398716272e-07,
  5.00000000000000000e+00, 2.79000000000000000e+02, 3.00000000000000000e+00,
  8.10000000000000000e+01 ] # 28,4, Number of max iteration: 74
                       , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            else:
                print ("EERROR n_qubits is : " + str(n_qubits))
                return 0
        ################ END OPT + TEST ################
        elif is_OPT:
            print ("Optimised params")
            # Get better hyper-params
            if n_qubits == 20:
                if (seed == 0):
                    res_opt = np.array(
                          [2.000000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            9.850000000000000e+02, 7.646470025219359e-03, 0.000000000000000e+00,
                            3.446580000000000e+05, 4.945800000000000e+04, 5.671681278327487e-05,
                            3.000000000000000e+00, 7.700000000000000e+01, 2.000000000000000e+00,
                            1.000000000000000e+00] # 20,0
                        , dtype=float)

                elif (seed == 1):
                    res_opt = np.array(
                          [2.000000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            8.070000000000000e+02, 9.414940404837249e-03, 1.000000000000000e+00,
                            3.821090000000000e+05, 9.648530000000000e+05, 9.001183795363324e-05,
                            6.000000000000000e+00, 7.900000000000000e+01, 2.000000000000000e+00,
                            6.400000000000000e+01] # 20,1
                        , dtype=float)

                elif (seed == 2):
                    res_opt = np.array(
                          [2.000000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            9.340000000000000e+02, 4.561174088287093e-03, 0.000000000000000e+00,
                            4.782680000000000e+05, 8.754600000000000e+05, 4.273140215415067e-05,
                            8.000000000000000e+00, 2.940000000000000e+02, 3.000000000000000e+00,
                            8.300000000000000e+01] # 20,2
                        , dtype=float)
                elif (seed == 3):
                    res_opt = np.array(
                          [2.0000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            5.5100000000000000e+02, 1.1313911666351014e-03, 1.0000000000000000e+00,
                            8.0253000000000000e+05, 1.0637400000000000e+05, 7.2305600603635463e-05,
                            1.0000000000000000e+00, 1.6100000000000000e+02, 2.0000000000000000e+00,
                            7.9000000000000000e+01] # 20,3
                        , dtype=float)

                elif (seed == 4):
                    res_opt = np.array(
                          [2.000000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            1.820000000000000e+02, 4.062657835696989e-03, 0.000000000000000e+00,
                            3.980850000000000e+05, 6.195000000000000e+04, 7.694141488546482e-05,
                            7.000000000000000e+00, 1.940000000000000e+02, 4.000000000000000e+00,
                            1.100000000000000e+01] # 20,4
                        , dtype=float)

                elif (seed == 5):
                    res_opt = np.array(
                          [2.000000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            5.930000000000000e+02, 8.469332043631622e-04, 1.000000000000000e+00,
                            2.784310000000000e+05, 1.484230000000000e+05, 6.666288532437001e-05,
                            7.000000000000000e+00, 1.580000000000000e+02, 4.000000000000000e+00,
                            5.800000000000000e+01] # 20,5
                        , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            elif n_qubits == 24:
                if (seed == 5):
                    res_opt = np.array(
                          [2.400000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            6.700000000000000e+01, 7.777419840322947e-03, 1.000000000000000e+00,
                            6.557150000000000e+05, 6.764430000000000e+05, 3.374110798030919e-05,
                            8.000000000000000e+00, 1.760000000000000e+02, 2.000000000000000e+00,
                            8.900000000000000e+01] # 24,5
                        , dtype=float)

                elif (seed == 6):
                    res_opt = np.array(
                          [2.400000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            2.920000000000000e+02, 4.008054676657879e-03, 0.000000000000000e+00,
                            7.628630000000000e+05, 6.031050000000000e+05, 6.330795877222486e-05,
                            3.000000000000000e+00, 1.590000000000000e+02, 4.000000000000000e+00,
                            8.200000000000000e+01] # 24,6
                        , dtype=float)

                elif (seed == 7):
                    res_opt = np.array(
                          [2.400000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            8.000000000000000e+01, 4.065357913442491e-03, 0.000000000000000e+00,
                            6.597160000000000e+05, 7.114860000000000e+05, 9.457289390322329e-05,
                            4.000000000000000e+00, 3.700000000000000e+01, 3.000000000000000e+00,
                            0.000000000000000e+00] # 24,7
                        , dtype=float)

                elif (seed == 8):
                    res_opt = np.array(
                          [2.4000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            2.1500000000000000e+02, 6.5915657167281965e-03, 1.0000000000000000e+00,
                            8.8541300000000000e+05, 2.9140100000000000e+05, 1.7452224964301655e-05,
                            1.0000000000000000e+00, 2.4700000000000000e+02, 4.0000000000000000e+00,
                            8.1000000000000000e+01] # 24,8
                        , dtype=float)

                elif (seed == 9):
                    res_opt = np.array(
                          [2.400000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            7.160000000000000e+02, 7.290649695544046e-03, 0.000000000000000e+00,
                            4.013500000000000e+05, 9.293610000000000e+05, 6.829347504312607e-05,
                            5.000000000000000e+00, 2.570000000000000e+02, 2.000000000000000e+00,
                            6.500000000000000e+01] # 24,9
                       , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            elif n_qubits == 28:
                if (seed == 0):
                    res_opt = np.array(
                          [2.8000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            1.9700000000000000e+02, 1.4221735408113214e-03, 1.0000000000000000e+00,
                            4.6005400000000000e+05, 2.0951800000000000e+05, 7.6252210555085548e-05,
                            7.0000000000000000e+00, 2.8700000000000000e+02, 3.0000000000000000e+00,
                            5.4000000000000000e+01] # 28,0
                       , dtype=float)

                elif (seed == 1):
                    res_opt = np.array(
                          [2.8000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            1.0000000000000000e+03, 6.5856701791176166e-03, 0.0000000000000000e+00,
                            6.1578700000000000e+05, 3.0093800000000000e+05, 1.0477064146237533e-05,
                            8.0000000000000000e+00, 2.2400000000000000e+02, 4.0000000000000000e+00,
                            9.8000000000000000e+01] # 28,1
                       , dtype=float)

                elif (seed == 2):
                    res_opt = np.array(
                          [2.8000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            5.3100000000000000e+02, 5.8803213869186004e-03, 1.0000000000000000e+00,
                            4.0235200000000000e+05, 2.5868300000000000e+05, 4.8122054934822504e-06,
                            8.0000000000000000e+00, 2.7700000000000000e+02, 2.0000000000000000e+00,
                            4.7000000000000000e+01] # 28,2
                       , dtype=float)

                elif (seed == 3):
                    res_opt = np.array(
                          [2.8000000000000000e+01, 1.0000000000000000e+00, 1.0000000000000000e+00,
                            6.2900000000000000e+02, 4.3556861247771575e-03, 0.0000000000000000e+00,
                            4.2900700000000000e+05, 8.2966000000000000e+04, 3.8930477726276007e-05,
                            8.0000000000000000e+00, 2.3900000000000000e+02, 4.0000000000000000e+00,
                            8.0000000000000000e+00] # 28,3
                       , dtype=float)

                elif (seed == 4):
                    res_opt = np.array(
                          [2.800000000000000e+01, 1.000000000000000e+00, 1.000000000000000e+00,
                            6.980000000000000e+02, 7.963411421630533e-03, 0.000000000000000e+00,
                            2.210610000000000e+05, 6.334120000000000e+05, 7.865327076261970e-05,
                            4.000000000000000e+00, 6.800000000000000e+01, 4.000000000000000e+00,
                            8.900000000000000e+01] # 28,4
                       , dtype=float)

                else:
                    print ("EERROR n_qubits is : " + str(n_qubits) + " with seed" + str(seed))
                    return 0

            else:
                print ("EERROR n_qubits is : " + str(n_qubits))
                return 0
        ################ END OPT ONLY ################
        else:
            print ("Default params")
            res_opt = [num_qubits, 0, False, True, 100, 0.001, False, 100, 10**5, 1e-6, 5, 128, 2, 0]

        # inputs
        prefix = str(num_qubits)+"20qubits_"

        if 0 <= seed <= 9:
            prefix +=f"0{seed}"
        else:
            prefix += str(seed)

        file_name = prefix + ".data"
        # Get Data
        result = process_file(folder_path, file_name)
        # Get Ham Qubit Size
        n_qubits=int(result[0])
        hamiltonian=result[1] # Need to load from Elena's files
        print_1(res_opt, hamiltonian, num_qubits, seed)

if __name__ == "__main__":
    main()
